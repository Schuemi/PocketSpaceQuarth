/*
 * The MIT License
 *
 * Copyright 2017 Schuemi.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


/* 
 * File:   Levels.h
 * Author: Schuemi
 *
 * Created on 14. Dezember 2017, 09:43
 */

#ifndef LEVELS_H
#define LEVELS_H
#include <stdint.h>
#include <avr/pgmspace.h>

struct levelCharacteristics {
        uint8_t scrollSpeed; // scrollspeed 45 - 1
        uint8_t objectMaxHeight; // maximum height of the objectGroup
        uint8_t objectMaxWidth; // maximum with 3 - 16
        uint8_t objectMaxCount; // maximum objects in one objectGroup
        uint8_t minObjectSpaceBetween; // min space between two objectGroups (not exactly)
        uint8_t objectCountPerStage; // objectgroup counts to go one stage up
        uint8_t tightLevel; // how tight are the objects places together to one objectGroup 0 - 3
};
 
static void getLcharacteristics(uint8_t level, uint8_t levelStage, uint8_t gameMode, levelCharacteristics* levelc) {
   
    
    
    // okay
    if (level == 1){
        levelc->scrollSpeed = 40;
        levelc->objectMaxHeight = 20;
        levelc->objectMaxCount = 10;
        levelc->objectMaxWidth = 6;
        levelc->minObjectSpaceBetween = 5;
        levelc->tightLevel = 4;
        levelc->objectCountPerStage = 1;
        if (levelStage > 4){ levelc->objectMaxCount = 15; levelc->scrollSpeed = 35;}
        if (levelStage > 8){ levelc->objectMaxWidth = 10; levelc->tightLevel = 3; }
        
    }
    // okay
     if (level == 2){
        levelc->scrollSpeed = 35;
        levelc->objectMaxHeight = 8;
        levelc->objectMaxCount = 15;
        levelc->objectMaxWidth = 10;
        levelc->minObjectSpaceBetween = 5;
        levelc->tightLevel = 4;
        levelc->objectCountPerStage = 1;
        if (levelStage > 4) levelc->scrollSpeed = 35;
        if (levelStage > 8) levelc->objectMaxWidth = 12;
        
    }
    
    //// okay: speed level  
    if (level == 3){
         levelc->scrollSpeed = 11;
        levelc->objectMaxHeight = 8;
        levelc->objectMaxCount = 3;
        levelc->objectMaxWidth = 8;
        levelc->minObjectSpaceBetween = 6;
        levelc->tightLevel = 1;
        levelc->objectCountPerStage = 2;
        
        
    }
    
    //// okay big and tight , big but slow
    if (level == 4){
        levelc->scrollSpeed = 50;
        levelc->objectMaxHeight = 30;
        levelc->objectMaxCount = 30;
        levelc->objectMaxWidth = 12;
        levelc->minObjectSpaceBetween = 6;
        levelc->tightLevel = 10;
        levelc->objectCountPerStage = 1;
        
    }
    
  
    
    // Okay: speed Level 2
    if (level == 5){
        levelc->scrollSpeed = 9;
        levelc->objectMaxHeight = 8;
        levelc->objectMaxCount = 3;
        levelc->objectMaxWidth = 8;
        levelc->minObjectSpaceBetween = 6;
        levelc->tightLevel = 3;
        levelc->objectCountPerStage = 4;
        
        
    }
     if (level == 6){
        levelc->scrollSpeed = 45- (levelStage * 3);
        levelc->objectMaxHeight = 30;
        levelc->objectMaxCount = 30;
        levelc->objectMaxWidth = 14;
        levelc->minObjectSpaceBetween = 12;
        levelc->tightLevel = 6;
        levelc->objectCountPerStage = 1;
        if (levelStage  % 2 == 1)
        {
            levelc->scrollSpeed = 6;
            levelc->objectMaxCount = 2;
            levelc->minObjectSpaceBetween = 19;
        }
       
        
    }
     if (level == 7){
         levelc->scrollSpeed = 35 - levelStage;
        levelc->objectMaxHeight = 30;
        levelc->objectMaxCount = 30;
        levelc->objectMaxWidth = 13;
        levelc->minObjectSpaceBetween = 10 - levelStage;
        levelc->tightLevel = levelStage + 1;
        levelc->objectCountPerStage = 1;
        
    }
    if (level >= 8){
         levelc->scrollSpeed = 42 - (levelStage * 3);
        levelc->objectMaxHeight = 30;
        levelc->objectMaxCount = 30;
        levelc->objectMaxWidth = 16 - levelStage;
        levelc->minObjectSpaceBetween = 20 - levelStage;
        levelc->tightLevel = 10;
        levelc->objectCountPerStage = 1;
        
        
        
    }
    
    if (gameMode == GAME_MODE_NORMAL)  levelc->scrollSpeed --;
    if (gameMode == GAME_MODE_HARD)  levelc->scrollSpeed -=2;
    
}   
struct levelObject {
    uint8_t x;
    uint8_t y;
    uint8_t objectType;
    uint8_t spezial;
    
};

//36x39
const uint8_t PROGMEM l1rPic[] = {
0x00,0x00,0x80,0xc0,0xe0,0xf0,0xf8,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xf8,0xf8,0xe0,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xc3,0xc1,0x61,0x30,0x38,0x38,0xf8,0xf8,0xf0,0xe0,0xe0,0xc0,0xe1,0x39,0x18,0xff,0xff,0xf4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x39,0x11,0x02,0x03,0x07,0x9f,0x0e,0x3e,0xfd,0x7f,0x7f,0x7f,0x7f,0x3f,0x7f,0x3d,0x3f,0x1f,0x3e,0x7c,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0xc1,0xc1,0xe0,0xe0,0xf0,0xf0,0xf0,0xf8,0xf8,0xf8,0xfa,0xf7,0x7f,0x1e,0x0c,0x0c,0xf8,0xf0,0xf8,0xf0,0xf0,0xe0,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x6e,0x7a,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x01,0x00,0x00,0x00,0x00,0x01,0x1f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

//36x40
//#const uint8_t PROGMEM l2rPic[] = {
//#0x00,0x00,0x00,0x80,0xa0,0xe0,0xf0,0xf0,0xf8,0xf2,0x3e,0x7f,0x1c,0x7c,0x9c,0x3c,0x38,0xbc,0x7e,0xf0,0xf0,0xf0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0xcc,0xff,0x83,0x83,0x71,0x78,0x7b,0xf0,0x47,0xf8,0xf7,0xfd,0xf7,0xbc,0xdf,0xfc,0xf1,0xef,0xe7,0xdf,0xff,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x0e,0x0c,0x38,0x33,0xe5,0x27,0x07,0x4f,0x4f,0x4f,0x2f,0x2f,0xdf,0xff,0xf7,0xe3,0xed,0xfc,0x9c,0xec,0x0c,0xf8,0xf0,0xe0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x0e,0x47,0x20,0x20,0x03,0x1f,0x10,0xe4,0xe9,0xe9,0xf7,0x3f,0xfe,0xf8,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x06,0x1a,0x43,0x7f,0x01,0x00,0x09,0x16,0x18,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
//#};

//36x42
const uint8_t PROGMEM l3rPic[] = {
0x00,0x00,0x00,0xf0,0x30,0x20,0x20,0x20,0xe0,0xe0,0xe0,0xe0,0xc0,0xc0,0xe0,0xe0,0xe0,0xa0,0xa0,0x20,0x20,0x20,0x40,0x40,0x40,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x30,0x78,0xfc,0x1f,0x06,0x83,0x01,0x00,0x00,0x00,0x01,0x1f,0x0f,0x07,0x07,0x07,0x07,0x0f,0x0f,0x1f,0x7e,0xfe,0xfc,0xf0,0x80,0x00,0x09,0x09,0xf2,0xbc,0x30,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x7c,0xfe,0x1f,0xfc,0x50,0xdc,0x66,0x47,0x47,0x67,0xd7,0xd7,0x57,0x5e,0x1e,0xfc,0xfc,0xfc,0xdf,0x1f,0xff,0xff,0xe0,0xf8,0xfc,0xff,0xff,0x7f,0x7c,0xf0,0xe0,0x40,0x00,0x00,0x00,0x00,0x00,0x40,0xe0,0xff,0xe0,0xc1,0x81,0xa0,0xa0,0xa0,0x81,0x81,0xc1,0xc0,0xe0,0xf0,0xfe,0xfe,0xfc,0xfe,0xff,0xff,0xff,0xff,0xff,0x0f,0x0f,0x0f,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x70,0xdc,0xfe,0xff,0xff,0xff,0xbf,0x3f,0x0f,0x07,0x0f,0xff,0xff,0xff,0x3b,0x1b,0x0b,0x07,0x0f,0xdf,0xf3,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x03,0x03,0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x03,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

//36x43
const uint8_t PROGMEM l4rPic[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xc0,0x60,0x20,0xb6,0x5f,0x7f,0x5e,0xbc,0x58,0xb8,0x58,0xb0,0x70,0xe0,0xc0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0xf3,0xb0,0x30,0xea,0xca,0x0a,0xca,0x3a,0xb0,0xb0,0xb0,0xb0,0x21,0x0c,0xfa,0xfc,0xff,0x7e,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x3e,0x73,0xc1,0xf3,0xff,0xd0,0x50,0x50,0x5b,0x59,0x91,0x01,0xa0,0x00,0xb0,0x5f,0x3f,0x1f,0x0c,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x50,0x70,0x60,0xe0,0xc8,0xc8,0xc8,0x88,0x98,0x8c,0x8c,0x1d,0x9f,0xff,0xab,0x5d,0xfb,0x89,0x9c,0xa8,0xf6,0x8e,0x46,0xb1,0x1a,0xf2,0xe0,0x44,0xc4,0x04,0x88,0x08,0x88,0x20,0x10,0x00,0x00,0xf8,0xff,0xf7,0x85,0x22,0x05,0x13,0xce,0xfd,0x02,0x05,0x06,0x06,0x0e,0x33,0x84,0x11,0x22,0x22,0x84,0x04,0x83,0x80,0x20,0xd8,0x1f,0x03,0x02,0x05,0xfe,0xf7,0xa0,0x86,0x18,0x00,0x00,0x07,0x07,0x01,0x05,0x03,0x03,0x02,0x07,0x07,0x03,0x04,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x06,0x01,0x00,0x00,0x00,0x00,0x07,0x07,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

//26,45
/*const uint8_t PROGMEM l5rPic[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xf0,0xfc,0xe2,0x01,0x7e,0x7e,0x01,0xe2,0xfc,0xf0,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x47,0xaf,0x2b,0x9f,0x5f,0x59,0x9d,0x2f,0xab,0x47,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x90,0x50,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0xb0,0x50,0x90,0xd0,0xf0,0xf0,0xff,0xb4,0x4b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb4,0x4b,0xb6,0xff,0xff,0xff,0x00,0x1f,0x05,0x03,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x05,0x1b,0x05,0x1b,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
//36,42
const uint8_t PROGMEM l6rPic[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xb0,0x48,0xb4,0xfe,0xfe,0xff,0xff,0xff,0xff,0xff,0xfe,0xfc,0xfc,0xf8,0xf0,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x8a,0xc1,0x8a,0x9f,0xbf,0x3f,0x7f,0xff,0x7f,0xbf,0xd7,0x9f,0x9f,0x9f,0x1f,0x8f,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x0d,0xfc,0x65,0x21,0x90,0x9f,0xbf,0x94,0x3d,0x7d,0xfd,0x8d,0xfe,0x3f,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0xc0,0x20,0x00,0x00,0x00,0x00,0x00,0x2a,0xd3,0x00,0x03,0x83,0xc0,0xc0,0xc3,0x03,0xc2,0xc3,0xfe,0x71,0x00,0x00,0x00,0x08,0x18,0x30,0xf0,0xe0,0xc0,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x0a,0x15,0x6a,0xfc,0xe0,0x80,0x00,0x00,0x00,0x00,0x03,0x00,0x63,0xc3,0xc3,0x83,0x03,0x01,0x00,0x00,0x00,0x00,0xc0,0xf0,0xfc,0x5f,0x0f,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x01,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
//36,44
const uint8_t PROGMEM l7rPic[] = {
0x00,0x00,0x00,0x00,0x00,0x80,0xc0,0x60,0x30,0x10,0x08,0x08,0x8c,0x8e,0xfe,0xfe,0xfa,0xf2,0xfe,0xfe,0xce,0x8c,0x08,0x08,0x18,0x30,0x60,0xe0,0xc0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x40,0xfc,0xfe,0xff,0xff,0x7e,0x3e,0x1e,0x0f,0x87,0x43,0x63,0x63,0xf3,0xf3,0xf3,0xf3,0x63,0x67,0x67,0x47,0xcf,0x8e,0x9e,0x3e,0x7f,0xff,0xff,0xff,0xfe,0xf8,0xf0,0x80,0x00,0x00,0x22,0x55,0x3f,0x7f,0x07,0x01,0xc0,0xf8,0xfe,0x9f,0xce,0xee,0x0f,0x0f,0x5f,0xff,0xff,0xff,0xcf,0xef,0xef,0x0e,0x0e,0x5f,0x3f,0xff,0xf8,0xc1,0x07,0x7f,0xff,0xff,0xff,0x1f,0x80,0x78,0x01,0x08,0x15,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x7f,0x7f,0x7c,0x78,0x78,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x78,0x78,0x7c,0xff,0xff,0xff,0xff,0x00,0x00,0x2a,0x57,0x87,0xf8,0xff,0xfe,0xff,0xff,0xff,0xfa,0xd8,0xc0,0x00,0x01,0x07,0x0f,0x0f,0x1e,0x3c,0x38,0x71,0x75,0x77,0x7f,0x7f,0x75,0x71,0x38,0x1c,0x1e,0x0f,0x87,0xd3,0xd8,0xfa,0xfe,0xfe,0xfc,0xf9,0x03,0x0f,0x03,0x07,0x0f,0x0f,0x03,0x01,0x08,0x00,0x00,0x00,0x0c,0x0c,0x0e,0x0e,0x0c,0x0c,0x08,0x00,0x0e,0x06,0x02,0x0b,0x09,0x0c,0x0c,0x00,0x01,0x01,0x03,0x07,0x0f,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
//36,40
const uint8_t PROGMEM l8rPic[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xfc,0xe6,0xc3,0xf1,0xe1,0x01,0x01,0x01,0x01,0x02,0x02,0x04,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xe0,0xb0,0x10,0x1e,0x0e,0x1f,0x1f,0x3f,0x7f,0xcf,0x1f,0x3f,0x3b,0x3b,0x01,0x2c,0x23,0x1f,0xff,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x67,0xff,0xff,0xfe,0x84,0xcc,0xde,0xfe,0xff,0x3f,0x5c,0xdc,0xdc,0xcc,0xcc,0xec,0x74,0x1c,0x8f,0xcf,0xf6,0xe7,0xf9,0xfc,0xfe,0x7e,0xfe,0xfc,0xd0,0x60,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x07,0x1c,0x3f,0xff,0xe7,0xe3,0xc7,0xc7,0x47,0x87,0x87,0x8f,0x8f,0x8f,0x8c,0xf8,0xc9,0xff,0x77,0x0f,0x0f,0x0f,0x0e,0x0f,0x0f,0x0f,0x07,0x06,0x03,0x00,0x40,0x60,0x60,0x70,0x70,0x70,0x70,0x70,0x7c,0x7f,0x77,0x73,0x71,0x70,0x70,0x70,0x70,0x70,0x70,0x71,0x71,0x77,0x7e,0x73,0x7e,0x70,0x70,0x30,0x30,0x30,0x20,0x20,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

const uint8_t PROGMEM l9rPic[] = {
0xf0,0xfc,0x0e,0x0e,0x06,0x04,0x00,0x10,0x30,0x60,0x80,0xc0,0x40,0x00,0xc0,0xf0,0xf0,0xf8,0x38,0x7c,0x2c,0x26,0xc6,0x46,0x3c,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0f,0x3c,0x70,0x40,0x00,0x00,0xc0,0xff,0xf8,0x00,0x00,0xe2,0xcc,0x11,0x9f,0x3f,0x7f,0x70,0x60,0x41,0x0b,0x8a,0x83,0xdc,0xe3,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4f,0xff,0xff,0xe0,0x80,0x81,0xf7,0xfc,0xf9,0xf6,0xf1,0x02,0x27,0xdf,0xbf,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xaf,0xff,0xdf,0x3f,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0xf3,0xff,0xde,0xfd,0xff,0xff,0xef,0xfe,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x87,0xf8,0x63,0x8e,0xdd,0xf9,0x7f,0xff,0xff,0xf7,0xdf,0xff,0xff,0xfb,0xff,0xff,0xff,0xf7,0xff,0xbf,0xff,0xf3,0xdc,0x98,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x01,0x03,0x01,0x0c,0x11,0x01,0x01,0x07,0x0f,0x1f,0x17,0x0f,0x1b,0x1f,0x1f,0x0f,0x06,0x0f,0x01,0x00,0x01,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};*/


const uint8_t PROGMEM bricks[] =  {
    0b11100000,
    0b10000000,
    0b10000000,
    0b00000000,
    0b00000000,
    
    
    0b11100000,
    0b00100000,
    0b00100000,
    0b00000000,
    0b00000000,
   
    
    0b11110000,
    0b10010000,
    0b10010000,
    0b00000000,
    0b00000000,
   
    
    0b11000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
   
    
    0b11000000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b01000000,
   
    
    0b11111000,
    0b10000000,
    0b00000000,
    0b00000000,
    0b00000000,
   
    
    
    0b11111000,
    0b00001000,
    0b00000000,
    0b00000000,
    0b00000000,
   
    
    0b11111000,
    0b00100000,
    0b00000000,
    0b00000000,
    0b00000000,
   
    
    0b11110000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
   
    
    0b11100000,
    0b01000000,
    0b01000000,
    0b00000000,
    0b00000000,
   
    
    
};


#endif /* LEVELS_H */


